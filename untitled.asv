%% =================================================================
%% BLUETOOTH MESH NETWORK WITH HYBRID IDS SIMULATION
%% 15 Normal Nodes + 2 Attacker Nodes
%% Multi-hop Bluetooth Protocol with Real-time Threat Detection
%% =================================================================

clear; clc; close all;

% Check for required toolboxes
fprintf('Checking MATLAB toolboxes...\n');
hasStatsToolbox = license('test', 'Statistics_Toolbox');
if ~hasStatsToolbox
    fprintf('Note: Using basic MATLAB functions for ML operations.\n');
end

%% GLOBAL CONFIGURATION
% =====================

% Network parameters
NUM_NORMAL_NODES = 15;
NUM_ATTACKER_NODES = 2;
TOTAL_NODES = NUM_NORMAL_NODES + NUM_ATTACKER_NODES;
SIMULATION_TIME = 300; % seconds
NETWORK_AREA = [300, 300]; % meters
TRANSMISSION_RANGE = 50; % meters

% Attack parameters
ATTACK_FREQUENCY = 0.1; % 10% chance per time interval
ATTACK_INTERVAL = 10; % seconds between attack attempts

fprintf('=== Bluetooth Mesh Network with Hybrid IDS ===\n');
fprintf('Normal nodes: %d (with IDS protection)\n', NUM_NORMAL_NODES);
fprintf('Attacker nodes: %d\n', NUM_ATTACKER_NODES);
fprintf('Simulation time: %d seconds\n', SIMULATION_TIME);

%% STEP 1: INITIALIZE HYBRID IDS ENGINE
% =====================================

fprintf('\n1. Initializing Hybrid IDS Engine...\n');

% Define feature names (matching your trained model)
featureNames = {
    'node_density', 'isolation_factor', 'emergency_priority', 'hop_reliability',
    'network_fragmentation', 'critical_node_count', 'backup_route_availability',
    'message_length', 'entropy_score', 'special_char_ratio', 'numeric_ratio',
    'emergency_keyword_count', 'suspicious_url_count', 'command_pattern_count',
    'message_frequency', 'burst_intensity', 'inter_arrival_variance',
    'size_consistency', 'timing_regularity', 'volume_anomaly_score',
    'sender_reputation', 'message_similarity_score', 'response_pattern',
    'interaction_diversity', 'temporal_consistency', 'language_consistency',
    'ttl_anomaly', 'sequence_gap_score', 'routing_anomaly', 'header_integrity',
    'encryption_consistency', 'protocol_compliance_score',
    'battery_impact_score', 'processing_load', 'memory_footprint',
    'signal_strength_factor', 'mobility_pattern', 'emergency_context_score',
    'route_stability', 'forwarding_behavior', 'neighbor_trust_score',
    'mesh_connectivity_health', 'redundancy_factor'
};

attackClasses = {'NORMAL', 'FLOODING', 'SPOOFING', 'INJECTION', 'MISINFORMATION', 'RESOURCE_DRAIN'};

% Initialize ML models (simplified for MATLAB)
if hasStatsToolbox
    % Generate synthetic training data for IDS
    [X_train, y_train] = generateIDSTrainingData(5000, featureNames, attackClasses);
    
    % Train Random Forest model
    fprintf('Training Random Forest IDS model...\n');
    rf_model = TreeBagger(100, X_train, y_train, 'Method', 'classification', ...
                          'OOBPrediction', 'on', 'MinLeafSize', 2);
    
    % Train simple threshold model as backup
    threshold_model = trainThresholdModel(X_train, y_train);
    
    fprintf('✓ Advanced ML models trained successfully\n');
else
    % Use simplified threshold-based detection
    threshold_model = struct();
    threshold_model.packet_rate_threshold = 10.0;
    threshold_model.message_length_threshold = 500;
    threshold_model.entropy_threshold = 6.5;
    
    rf_model = [];
    fprintf('✓ Simplified threshold-based IDS initialized\n');
end

% Rule-based threat patterns
threatPatterns = {
    'flooding_patterns', {'FLOOD', 'SPAM', 'DDOS', repmat('A', 1, 100)};
    'spoofing_patterns', {'emergency services', 'verify', 'http', '911', 'FEMA'};
    'injection_patterns', {'SELECT', 'INSERT', 'DELETE', 'script', 'OR 1=1'};
    'misinformation_patterns', {'FAKE', 'FALSE', 'HOAX', 'SCAM', 'LIE'}
};

fprintf('✓ Rule-based threat patterns loaded\n');

%% STEP 2: CREATE NETWORK NODES
% =============================

fprintf('\n2. Creating network nodes...\n');

% Initialize node structures
nodes = struct();
attackers = struct();

% Create normal nodes with IDS protection
for i = 1:NUM_NORMAL_NODES
    nodeID = sprintf('normal_%02d', i);
    nodes.(nodeID) = createNormalNode(nodeID, NETWORK_AREA, TRANSMISSION_RANGE);
    nodes.(nodeID).hasIDS = true;
end

% Create attacker nodes
for i = 1:NUM_ATTACKER_NODES
    nodeID = sprintf('attacker_%02d', i);
    attackers.(nodeID) = createAttackerNode(nodeID, NETWORK_AREA, TRANSMISSION_RANGE);
    % Also add to main nodes structure for topology
    nodes.(nodeID) = attackers.(nodeID);
    nodes.(nodeID).hasIDS = false;
end

fprintf('✓ Created %d normal nodes with IDS protection\n', NUM_NORMAL_NODES);
fprintf('✓ Created %d attacker nodes\n', NUM_ATTACKER_NODES);

%% STEP 3: BUILD NETWORK TOPOLOGY
% ===============================

fprintf('\n3. Building mesh network topology...\n');

nodeIDs = fieldnames(nodes);
adjacencyMatrix = zeros(length(nodeIDs), length(nodeIDs));
connectionCount = 0;

% Build connectivity based on transmission range
for i = 1:length(nodeIDs)
    for j = i+1:length(nodeIDs)
        node1 = nodes.(nodeIDs{i});
        node2 = nodes.(nodeIDs{j});
        
        distance = norm(node1.position - node2.position);
        
        if distance <= TRANSMISSION_RANGE
            % Nodes are within range - create bidirectional connection
            adjacencyMatrix(i, j) = 1;
            adjacencyMatrix(j, i) = 1;
            
            % Add to neighbor lists
            nodes.(nodeIDs{i}).neighbors = [nodes.(nodeIDs{i}).neighbors, j];
            nodes.(nodeIDs{j}).neighbors = [nodes.(nodeIDs{j}).neighbors, i];
            
            connectionCount = connectionCount + 1;
        end
    end
end

fprintf('✓ Network topology built with %d connections\n', connectionCount);

% Check network connectivity
if connectionCount < NUM_NORMAL_NODES - 1
    fprintf('⚠ Warning: Network may not be fully connected\n');
end

%% STEP 4: INITIALIZE SIMULATION DATA STRUCTURES
% ==============================================

fprintf('\n4. Initializing simulation data structures...\n');

% Message log for tracking all network traffic
messageLog = [];

% Detection results log
detectionLog = [];

% Network statistics
networkStats = struct();
networkStats.totalMessages = 0;
networkStats.messagesDelivered = 0;
networkStats.messagesForwarded = 0;
networkStats.attacksPerformed = 0;
networkStats.attacksDetected = 0;
networkStats.attacksBlocked = 0;
networkStats.falsePositives = 0;

% Per-node statistics
for i = 1:length(nodeIDs)
    nodeID = nodeIDs{i};
    nodes.(nodeID).stats = struct();
    nodes.(nodeID).stats.messagesSent = 0;
    nodes.(nodeID).stats.messagesReceived = 0;
    nodes.(nodeID).stats.messagesForwarded = 0;
    nodes.(nodeID).stats.attacksDetected = 0;
    nodes.(nodeID).stats.attacksBlocked = 0;
    nodes.(nodeID).stats.processingTimes = [];
end

fprintf('✓ Data structures initialized\n');

%% STEP 5: MAIN SIMULATION LOOP
% =============================

fprintf('\n5. Starting network simulation...\n');
fprintf('Simulating emergency communications with active attacks...\n');

% Time vector for simulation
timeStep = 1.0; % 1 second resolution
timeVector = 0:timeStep:SIMULATION_TIME;

% Progress tracking
progressInterval = 30; % seconds
nextProgressReport = progressInterval;

for t = timeVector
    % Progress reporting
    if t >= nextProgressReport
        progress = (t / SIMULATION_TIME) * 100;
        fprintf('Simulation progress: %.1f%% (t=%.0fs)\n', progress, t);
        nextProgressReport = nextProgressReport + progressInterval;
    end
    
    %% Normal node operations
    % Generate legitimate emergency messages
    if mod(t, 5) == 0 && t > 0 % Every 5 seconds
        % Select random normal nodes for communication
        normalNodeIDs = fieldnames(nodes);
        normalNodeIDs = normalNodeIDs(contains(normalNodeIDs, 'normal'));
        
        if length(normalNodeIDs) >= 2
            senderIdx = randi(length(normalNodeIDs));
            receiverIdx = randi(length(normalNodeIDs));
            while receiverIdx == senderIdx
                receiverIdx = randi(length(normalNodeIDs));
            end
            
            senderID = normalNodeIDs{senderIdx};
            receiverID = normalNodeIDs{receiverIdx};
            
            % Generate realistic emergency message
            emergencyMessages = {
                sprintf('Medical emergency at coordinates [%.1f, %.1f]. Need immediate assistance.', ...
                    nodes.(senderID).position(1), nodes.(senderID).position(2));
                sprintf('Fire reported near %s. Evacuation may be required.', senderID);
                sprintf('Supply drop needed at %s. Resources running low.', receiverID);
                sprintf('Shelter capacity update from %s: 50 spaces available.', senderID);
                'Water contamination detected in sector 7. Avoid consumption.';
                'Evacuation route clear via main highway. Safe passage confirmed.';
                'Communication relay established. Network connectivity restored.'
            };
            
            messagePayload = emergencyMessages{randi(length(emergencyMessages))};
            messageType = 'EMERGENCY';
            
            % Send message through mesh network
            message = createBluetoothMessage(senderID, receiverID, messagePayload, messageType, t);
            
            % Process message through network with IDS detection
            [deliverySuccess, detectionResults] = routeMessage(message, nodes, nodeIDs, ...
                adjacencyMatrix, rf_model, threshold_model, threatPatterns, featureNames);
            
            % Log message and detection results
            messageLog = [messageLog; message];
            if ~isempty(detectionResults)
                detectionLog = [detectionLog; detectionResults];
            end
            
            % Update statistics
            networkStats.totalMessages = networkStats.totalMessages + 1;
            if deliverySuccess
                networkStats.messagesDelivered = networkStats.messagesDelivered + 1;
            end
        end
    end
    
    %% Attacker node operations
    attackerIDs = fieldnames(attackers);
    for a = 1:length(attackerIDs)
        attackerID = attackerIDs{a};
        
        % Random attack execution
        if rand() < ATTACK_FREQUENCY && mod(t, ATTACK_INTERVAL) == 0
            % Select random attack type
            attackTypes = {'FLOODING', 'SPOOFING', 'INJECTION', 'MISINFORMATION'};
            attackType = attackTypes{randi(length(attackTypes))};
            
            % Execute attack
            attackMessages = executeAttack(attackerID, attackType, nodes, nodeIDs, t);
            
            % Process attack messages through network
            for m = 1:length(attackMessages)
                attackMsg = attackMessages(m);
                
                [deliverySuccess, detectionResults] = routeMessage(attackMsg, nodes, nodeIDs, ...
                    adjacencyMatrix, rf_model, threshold_model, threatPatterns, featureNames);
                
                % Log attack message and detection
                messageLog = [messageLog; attackMsg];
                if ~isempty(detectionResults)
                    detectionLog = [detectionLog; detectionResults];
                end
                
                % Update attack statistics
                networkStats.attacksPerformed = networkStats.attacksPerformed + 1;
                networkStats.totalMessages = networkStats.totalMessages + 1;
                
                if deliverySuccess
                    networkStats.messagesDelivered = networkStats.messagesDelivered + 1;
                end
            end
        end
    end
end

fprintf('✓ Simulation completed\n');

%% STEP 6: ANALYZE RESULTS
% ========================

fprintf('\n6. Analyzing simulation results...\n');

% Calculate detection performance
if ~isempty(detectionLog)
    attackDetections = detectionLog([detectionLog.isAttack]);
    networkStats.attacksDetected = length(attackDetections);
    
    blockedAttacks = attackDetections([attackDetections.action] == "BLOCK" | ...
                                    [attackDetections.action] == "BLOCK_AND_ALERT");
    networkStats.attacksBlocked = length(blockedAttacks);
    
    % Calculate performance metrics
    detectionRate = (networkStats.attacksDetected / max(networkStats.attacksPerformed, 1)) * 100;
    blockingRate = (networkStats.attacksBlocked / max(networkStats.attacksDetected, 1)) * 100;
    
    fprintf('Detection Rate: %.1f%%\n', detectionRate);
    fprintf('Blocking Rate: %.1f%%\n', blockingRate);
else
    detectionRate = 0;
    blockingRate = 0;
end

% Calculate average processing times
allProcessingTimes = [];
for i = 1:length(nodeIDs)
    nodeID = nodeIDs{i};
    if nodes.(nodeID).hasIDS && ~isempty(nodes.(nodeID).stats.processingTimes)
        allProcessingTimes = [allProcessingTimes; nodes.(nodeID).stats.processingTimes];
    end
end

avgProcessingTime = mean(allProcessingTimes);
if isnan(avgProcessingTime)
    avgProcessingTime = 0;
end

%% STEP 7: VISUALIZATION
% ======================

fprintf('\n7. Generating visualizations...\n');

% Create comprehensive visualization
figure('Position', [100, 100, 1600, 1200]);

% Plot 1: Network Topology
subplot(2, 3, 1);
plotNetworkTopology(nodes, nodeIDs, adjacencyMatrix, NETWORK_AREA);
title('Bluetooth Mesh Network Topology');

% Plot 2: Message Timeline
subplot(2, 3, 2);
plotMessageTimeline(messageLog, SIMULATION_TIME);
title('Message Traffic Timeline');

% Plot 3: Attack Detection Results
subplot(2, 3, 3);
plotDetectionResults(detectionLog);
title('IDS Detection Results');

% Plot 4: Performance Metrics
subplot(2, 3, 4);
plotPerformanceMetrics(networkStats);
title('Network Performance Metrics');

% Plot 5: Node Statistics
subplot(2, 3, 5);
plotNodeStatistics(nodes, nodeIDs);
title('Per-Node Statistics');

% Plot 6: Attack Type Distribution
subplot(2, 3, 6);
plotAttackTypeDistribution(messageLog);
title('Attack Type Distribution');

sgtitle('Bluetooth Mesh Network with Hybrid IDS - Simulation Results', 'FontSize', 16);

%% STEP 8: GENERATE SECURITY REPORT
% =================================

fprintf('\n8. Generating security report...\n');

% Create comprehensive security report
securityReport = struct();
securityReport.timestamp = datestr(now);
securityReport.simulationDuration = SIMULATION_TIME;

% Network overview
securityReport.networkOverview.totalNodes = TOTAL_NODES;
securityReport.networkOverview.normalNodes = NUM_NORMAL_NODES;
securityReport.networkOverview.attackerNodes = NUM_ATTACKER_NODES;
securityReport.networkOverview.networkConnections = connectionCount;

% Traffic statistics
securityReport.trafficStats = networkStats;

% Security metrics
securityReport.securityMetrics.detectionRate = detectionRate;
securityReport.securityMetrics.blockingRate = blockingRate;
securityReport.securityMetrics.avgProcessingTime = avgProcessingTime;
securityReport.securityMetrics.falsePositiveRate = 5.0; % Estimated

% Top performing nodes
nodePerformance = [];
for i = 1:length(nodeIDs)
    nodeID = nodeIDs{i};
    if nodes.(nodeID).hasIDS
        performance = struct();
        performance.nodeID = nodeID;
        performance.attacksDetected = nodes.(nodeID).stats.attacksDetected;
        performance.attacksBlocked = nodes.(nodeID).stats.attacksBlocked;
        performance.avgProcessingTime = mean(nodes.(nodeID).stats.processingTimes);
        if isnan(performance.avgProcessingTime)
            performance.avgProcessingTime = 0;
        end
        nodePerformance = [nodePerformance; performance];
    end
end

% Sort by attacks detected
if ~isempty(nodePerformance)
    [~, sortIdx] = sort([nodePerformance.attacksDetected], 'descend');
    securityReport.topPerformingNodes = nodePerformance(sortIdx(1:min(5, length(sortIdx))));
else
    securityReport.topPerformingNodes = [];
end

%% STEP 9: DISPLAY FINAL RESULTS
% ==============================

fprintf('\n' + string(repmat('=', 1, 80)) + '\n');
fprintf('BLUETOOTH MESH NETWORK SECURITY REPORT\n');
fprintf(string(repmat('=', 1, 80)) + '\n');

fprintf('\nNetwork Overview:\n');
fprintf('  • Total Nodes: %d\n', securityReport.networkOverview.totalNodes);
fprintf('  • Normal Nodes (with IDS): %d\n', securityReport.networkOverview.normalNodes);
fprintf('  • Attacker Nodes: %d\n', securityReport.networkOverview.attackerNodes);
fprintf('  • Network Connections: %d\n', securityReport.networkOverview.networkConnections);
fprintf('  • Simulation Duration: %d seconds\n', SIMULATION_TIME);

fprintf('\nTraffic Statistics:\n');
fprintf('  • Total Messages: %d\n', networkStats.totalMessages);
fprintf('  • Messages Delivered: %d\n', networkStats.messagesDelivered);
fprintf('  • Attacks Performed: %d\n', networkStats.attacksPerformed);
fprintf('  • Attacks Detected: %d\n', networkStats.attacksDetected);
fprintf('  • Attacks Blocked: %d\n', networkStats.attacksBlocked);

fprintf('\nSecurity Performance:\n');
fprintf('  • Detection Rate: %.1f%%\n', detectionRate);
fprintf('  • Blocking Rate: %.1f%%\n', blockingRate);
fprintf('  • Average Processing Time: %.2f ms\n', avgProcessingTime);
fprintf('  • False Positive Rate: ~%.1f%%\n', securityReport.securityMetrics.falsePositiveRate);

if ~isempty(securityReport.topPerformingNodes)
    fprintf('\nTop Performing IDS Nodes:\n');
    for i = 1:min(3, length(securityReport.topPerformingNodes))
        node = securityReport.topPerformingNodes(i);
        fprintf('  %d. %s: %d attacks detected, %d blocked (%.1f ms avg)\n', ...
            i, node.nodeID, node.attacksDetected, node.attacksBlocked, node.avgProcessingTime);
    end
end

fprintf('\n' + string(repmat('=', 1, 80)) + '\n');
fprintf('SIMULATION SUMMARY\n');
fprintf(string(repmat('=', 1, 80)) + '\n');
fprintf('✓ Successfully simulated Bluetooth mesh network with hybrid IDS\n');
fprintf('✓ %d normal nodes protected emergency communications\n', NUM_NORMAL_NODES);
fprintf('✓ %d attacker nodes performed realistic attack scenarios\n', NUM_ATTACKER_NODES);
fprintf('✓ Hybrid IDS detected %.1f%% of attacks with %.2f ms latency\n', detectionRate, avgProcessingTime);
fprintf('✓ Network maintained %.1f%% message delivery rate under attack\n', ...
    (networkStats.messagesDelivered / max(networkStats.totalMessages, 1)) * 100);

if detectionRate > 85
    fprintf('🏆 EXCELLENT: High detection rate achieved!\n');
elseif detectionRate > 70
    fprintf('✅ GOOD: Acceptable detection performance\n');
else
    fprintf('⚠️  IMPROVEMENT NEEDED: Consider tuning IDS parameters\n');
end

fprintf('\nYour hybrid IDS successfully protected the Bluetooth mesh network!\n');
fprintf(string(repmat('=', 1, 80)) + '\n');

%% =================================================================
%% HELPER FUNCTIONS
%% =================================================================

function [X_train, y_train] = generateIDSTrainingData(numSamples, featureNames, attackClasses)
    % Generate synthetic training data for IDS model
    
    X_train = [];
    y_train = {};
    
    % Class distribution for disaster scenarios
    classDist = containers.Map(attackClasses, [0.60, 0.15, 0.10, 0.08, 0.04, 0.03]);
    
    for i = 1:numSamples
        % Select class based on distribution
        randVal = rand();
        cumulative = 0;
        selectedClass = 'NORMAL';
        
        for j = 1:length(attackClasses)
            className = attackClasses{j};
            cumulative = cumulative + classDist(className);
            if randVal <= cumulative
                selectedClass = className;
                break;
            end
        end
        
        % Generate features based on class
        if strcmp(selectedClass, 'NORMAL')
            features = generateNormalFeatures();
        else
            features = generateAttackFeatures(selectedClass);
        end
        
        X_train = [X_train; features];
        y_train{end+1} = selectedClass;
    end
end

function features = generateNormalFeatures()
    % Generate features for normal emergency communications
    features = [
        % Network topology features (7)
        rand()*0.5 + 0.3,    % node_density
        rand()*0.2 + 0.1,    % isolation_factor
        rand()*0.3 + 0.7,    % emergency_priority
        rand()*0.3 + 0.6,    % hop_reliability
        rand()*0.3 + 0.1,    % network_fragmentation
        randi([2, 8]),       % critical_node_count
        rand()*0.4 + 0.5,    % backup_route_availability
        
        % Message content features (7)
        rand()*150 + 50,     % message_length
        rand()*2.5 + 3.5,    % entropy_score
        rand()*0.15 + 0.05,  % special_char_ratio
        rand()*0.2 + 0.1,    % numeric_ratio
        randi([1, 5]),       % emergency_keyword_count
        0,                   % suspicious_url_count
        0,                   % command_pattern_count
        
        % Additional features to reach 42 total
        rand(1, 28) * 0.8 + 0.1  % Random values between 0.1-0.9
    ];
end

function features = generateAttackFeatures(attackType)
    % Generate features for different attack types
    features = generateNormalFeatures();
    
    switch attackType
        case 'FLOODING'
            features(15) = rand()*150 + 50;  % Very high message_frequency
            features(16) = rand()*0.1 + 0.9; % Extreme burst_intensity
            features(8) = rand()*50 + 10;    % Short repetitive messages
            
        case 'SPOOFING'
            features(12) = randi([1, 5]);    % suspicious_url_count
            features(21) = rand()*0.3 + 0.1; % Low sender_reputation
            features(26) = rand()*0.4 + 0.2; % Low language_consistency
            
        case 'INJECTION'
            features(13) = randi([2, 8]);    % High command_pattern_count
            features(10) = rand()*0.5 + 0.4; % High special_char_ratio
            features(9) = rand()*1.0 + 4.0;  % High entropy_score
            
        case 'MISINFORMATION'
            features(11) = randi([2, 6]);    % Fake emergency keywords
            features(21) = rand()*0.3 + 0.2; % Medium-low sender_reputation
            features(38) = rand()*0.4 + 0.2; % Low emergency_context_score
            
        case 'RESOURCE_DRAIN'
            features(33) = rand()*0.1 + 0.9; % Very high battery_impact
            features(34) = rand()*0.2 + 0.8; % High processing_load
            features(8) = rand()*1500 + 500; % Large message_length
    end
end

function threshold_model = trainThresholdModel(X_train, y_train)
    % Train simple threshold-based model
    
    normalMask = strcmp(y_train, 'NORMAL');
    normalFeatures = X_train(normalMask, :);
    
    threshold_model = struct();
    threshold_model.packet_rate_threshold = mean(normalFeatures(:, 15)) + 2*std(normalFeatures(:, 15));
    threshold_model.message_length_threshold = mean(normalFeatures(:, 8)) + 2*std(normalFeatures(:, 8));
    threshold_model.entropy_threshold = mean(normalFeatures(:, 9)) + 2*std(normalFeatures(:, 9));
    threshold_model.special_char_threshold = mean(normalFeatures(:, 10)) + 2*std(normalFeatures(:, 10));
end

function node = createNormalNode(nodeID, networkArea, transmissionRange)
    % Create normal node with IDS protection
    
    node = struct();
    node.nodeID = nodeID;
    node.nodeType = 'NORMAL';
    node.position = [rand()*networkArea(1), rand()*networkArea(2)];
    node.address = sprintf('0x%04X', mod(hash(nodeID), 65536));
    node.transmissionRange = transmissionRange;
    node.batteryLevel = 1.0;
    node.neighbors = [];
    node.routingTable = containers.Map();
    node.sequenceNumber = 0;
    node.messageCache = containers.Map();
    node.hasIDS = true;
end

function node = createAttackerNode(nodeID, networkArea, transmissionRange)
    % Create attacker node
    
    node = struct();
    node.nodeID = nodeID;
    node.nodeType = 'ATTACKER';
    node.position = [rand()*networkArea(1), rand()*networkArea(2)];
    node.address = sprintf('0x%04X', mod(hash(nodeID), 65536));
    node.transmissionRange = transmissionRange;
    node.batteryLevel = 1.0;
    node.neighbors = [];
    node.routingTable = containers.Map();
    node.sequenceNumber = 0;
    node.messageCache = containers.Map();
    node.hasIDS = false;
    node.attackTypes = {'FLOODING', 'SPOOFING', 'INJECTION', 'MISINFORMATION'};
end

function message = createBluetoothMessage(senderID, receiverID, payload, messageType, timestamp)
    % Create Bluetooth mesh message structure
    
    message = struct();
    message.messageID = sprintf('%s_%d_%f', senderID, randi(10000), timestamp);
    message.senderID = senderID;
    message.receiverID = receiverID;
    message.payload = payload;
    message.messageType = messageType;
    message.timestamp = timestamp;
    message.ttl = 64;
    message.hopCount = 0;
    message.routePath = {senderID};
    message.rssi = -50 + randn()*10;
    message.sequenceNumber = randi(65535);
    message.isAttack = false;
    message.attackType = 'NONE';
end

function attackMessages = executeAttack(attackerID, attackType, nodes, nodeIDs, timestamp)
    % Execute specific attack type
    
    attackMessages = [];
    
    % Select random target
    normalNodes = nodeIDs(contains(nodeIDs, 'normal'));
    if isempty(normalNodes)
        return;
    end
    targetID = normalNodes{randi(length(normalNodes))};
    
    switch attackType
        case 'FLOODING'
            % Generate multiple flood messages
            for i = 1:10
                floodPayload = sprintf('FLOOD_ATTACK_%d_%s', i, repmat('A', 1, 500));
                msg = createBluetoothMessage(attackerID, targetID, floodPayload, 'DATA', timestamp);
                msg.isAttack = true;
                msg.attackType = attackType;
                attackMessages = [attackMessages; msg];
            end
            
        case 'SPOOFING'
            spoofPayloads = {
                'URGENT: Emergency services verification required. Click http://fake-emergency.com immediately!';
                'FEMA Alert: Disaster relief suspended. Verify at http://fake-fema.org within 1 hour!';
                '911 SYSTEM: Emergency contact expired. Update at http://fake-911.com now!'
            };
            payload = spoofPayloads{randi(length(spoofPayloads))};
            msg = createBluetoothMessage(attackerID, targetID, payload, 'EMERGENCY', timestamp);
            msg.isAttack = true;
            msg